(* rename identifiers to make them unique (alpha-conversion) *)

(* このファイルのコメントはKoki3110によってつけられた *)

(*各型の定義はkNormal.mlにある*)
open KNormal

(*MはほぼMap.Make。詳細はm.ml*)
(*環境envはα変換前の変数名から変換後の変数名への写像である。*)

(*環境にxに対応する変換後の変数名がないか探す。なかったら今の変数名をそのまま返す。あったらを取り出して変換後の変数名返す。*)
let find x env = try M.find x env with Not_found -> x

(*α変換の本体。環境とα変換前の式を受け取り、α変換後の式を返す。*)
let rec g env = function (* α変換ルーチン本体 (caml2html: alpha_g) *)
  (*ベースケース*)
  | Unit -> Unit (*変数を含まないものはそのまま*)
  | Int(i) -> Int(i)
  | Float(d) -> Float(d)
  | Neg(x) -> Neg(find x env) (*変数を含むものは、環境から変換後の変数名を取り出して置き換える。環境中になかったら今の変数名そのまま(外部変数がこう扱われる)。*)
  | Add(x, y) -> Add(find x env, find y env)
  | Sub(x, y) -> Sub(find x env, find y env)
  | FNeg(x) -> FNeg(find x env)
  | FAdd(x, y) -> FAdd(find x env, find y env)
  | FSub(x, y) -> FSub(find x env, find y env)
  | FMul(x, y) -> FMul(find x env, find y env)
  | FDiv(x, y) -> FDiv(find x env, find y env)
  | IfEq(x, y, e1, e2) -> IfEq(find x env, find y env, g env e1, g env e2) (*α変換ルーチンの再帰により分岐後の式をα変換*)
  | IfLE(x, y, e1, e2) -> IfLE(find x env, find y env, g env e1, g env e2)
  | Var(x) -> Var(find x env) (*環境から変換後の変数名を取り出して置き換える。環境中になかったら今の変数名そのまま(外部変数の扱い)。*)
  | App(x, ys) -> App(find x env, List.map (fun y -> find y env) ys)
  | Tuple(xs) -> Tuple(List.map (fun x -> find x env) xs)
  | Get(x, y) -> Get(find x env, find y env)
  | Put(x, y, z) -> Put(find x env, find y env, find z env)
  | ExtArray(x) -> ExtArray(x)(*外部変数は環境に登録されないので、α変換の対象にならない。*)
  | ExtFunApp(x, ys) -> ExtFunApp(x, List.map (fun y -> find y env) ys) (*ExtFunAppの関数名は外部変数なので変換の対象外。引数は内部で宣言した変数を使えるのでα変換する。*)
  (*再帰ステップ*)
  | Let((x, t), e1, e2) -> (* letのα変換 (caml2html: alpha_let) *)
    let x' = Id.genid x in (*新しい変数を作る*)
    Let((x', t), g env e1, g (M.add x x' env) e2) (*e1を変換した後に、xからx'への対応を環境に追加してe2を変換する*)
  | LetRec({ name = (x, t); args = yts; body = e1 }, e2) -> (* let recのα変換 (caml2html: alpha_letrec) *) (*tはe1の型*)
    let env = M.add x (Id.genid x) env in(*関数名に対し、新しい変数を作って環境に追加する(env)*)
    let ys = List.map fst yts in (*引数から型を取り除き式だけ取り出す*)
    let env' = M.add_list2 ys (List.map Id.genid ys) env in (*各引数に対し、新しい変数を作る。各引数から各新変数への対応を環境に追加する。(env')*)
    LetRec({ name = (find x env, t);(*環境から変換後の変数名を取り出して置き換える。環境中になかったら今の変数名そのまま(外部変数の扱い)。*)
             args = List.map (fun (y, t) -> (find y env', t)) yts;(*引数のα変換*)
             body = g env' e1 },(*e1のα変換は引数の変換前後の対応が入っている環境(env')を使って行う*)
           g env e2)(*e2のα変換は引数の変換前後の対応が入っていない環境(env)を使って行う*)
  | LetTuple(xts, y, e) -> (* LetTupleのα変換 (caml2html: alpha_lettuple) *)
    let xs = List.map fst xts in (*let (x1, ..., xn) = y in e の(x1, ..., xn)から型を取り除き式だけ取り出す*)
    let env' = M.add_list2 xs (List.map Id.genid xs) env in(*x1,...,xnのそれぞれに対し、新しい変数を作り、元の変数から新変数への対応を環境に追加する。(env')*)
    LetTuple(List.map (fun (x, t) -> (find x env', t)) xts,(*(x1, ..., xn)のα変換*)
             find y env,(*yの変換は(x1, ..., xn)が定義される前の環境で行う*)
             g env' e)(*eの変換は(x1, ..., xn)が定義された後の環境で行う*)

let f = g M.empty (*変換前の変数名から変換後の変数名への対応が無い状態で変換を始める。(Let,LetRec,LetTupleによって対応が追加されていく)*)
